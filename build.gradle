buildscript {
	repositories {
		maven { url "http://maven.artifacts.furycloud.io/repository/all" }
		mavenLocal()
	}

	dependencies {
		classpath group: 'com.mercadolibre', name: 'i18n', version: "$i18nVersion"
	}
}

plugins {
	id 'application'
	id 'java'
	id 'jacoco'
	id 'idea'
	id 'distribution'
	id "it.gianluz.capsule" version "1.0.3"
	id 'com.monits.staticCodeAnalysis' version '2.6.4'
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
javadoc.options.encoding = "UTF-8"
jar.enabled = false

mainClassName = 'com.mercadolibre.Main'

group = 'com.mercadolibre'
version = '0.0.1-SNAPSHOT'

description = """px-checkout-mobile-payments"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

def envType = 'development'
if (project.hasProperty('production')) {
	envType = 'production'
}

sourceSets {
	main {
		resources {
			srcDir "src/main/resources/${envType}"
		}
	}
	test {
		resources {
			srcDir "src/main/resources/local"
		}
	}
}

repositories {
	maven {
		url "http://maven.artifacts.furycloud.io/repository/all"
	}
	mavenLocal()
	jcenter()
}

dependencies {
	compile "com.google.guava:guava:$guavaVersion"
	compile "com.google.code.gson:gson:$gsonVersion"
	compile "com.sparkjava:spark-core:$sparkVersion"
	compile "com.mercadolibre.restclient:restclient-default:$restClientVersion"
	compile "com.newrelic.agent.java:newrelic-api:$newRelicVersion"
	compile "commons-configuration:commons-configuration:$commonsConfigurationVersion"
	compile "com.mercadolibre.json:json-core:$jsonCoreVersion"
	compile "com.mercadolibre.px:px-toolkit:$toolkitVersion"
	compile "com.mercadolibre.px:px-dto-lib:$dtoLibVersion"
	compile "com.mercadolibre.px:px-api-lib:$apiLibVersion"

	// MLAuth for access_token filter info
	compile 'com.mercadolibre.security:mlauth:0.0.8'

	// Apache
	compile 'org.apache.httpcomponents:httpcore:4.4.9'

	// Metrics and logs
	compile 'org.apache.logging.log4j:log4j-api:2.11.2'
	compile 'org.apache.logging.log4j:log4j-core:2.11.2'
	compile 'com.mercadolibre.metrics:datadog-metric-wrapper:0.0.11'

	// Lombok
	compileOnly 'org.projectlombok:lombok:1.18.10'
	annotationProcessor 'org.projectlombok:lombok:1.18.10'

	// Test tools
	testCompile 'junit:junit:4.12'
	testCompile "com.mercadolibre.restclient:restclient-core:$restClientVersion:tests"
	testCompile "io.rest-assured:rest-assured:$restAssuredVersion"
	testCompile "org.mockito:mockito-core:$mockitoCoreVersion"

	// Babel
	compile ("com.mercadolibre:i18n:$i18nVersion") {
		exclude group: "org.apache.commons", module: "commons-io"
	}

	runtime files('lib/i18ngettext.jar') // i18n generated jar containing all the strings
}

defaultTasks 'run'

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
	}
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'com/mercadolibre/constants',
					'com/mercadolibre/Main.class',
					'com/mercadolibre/dto',
			])
		})
	}
}

test {
	// Endpoint tests run from within the ApiTest Suite, avoid double run
	exclude 'com/mercadolibre/endpoints/**'
	jvmArgs = ['-XX:+StartAttachListener']
	testLogging {
		exceptionFormat = 'full'
	}
}

check.dependsOn jacocoTestReport

task app(type: Jar) {
	archiveName = 'application.jar'
	manifest {
		attributes 'Main-Class': 'com.mercadolibre.Main'
	}
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

task checkCodeFormat(type: Exec) {
	commandLine './bin/check_code_format.sh'
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.10.3'
}

staticCodeAnalysis {
	ignoreErrors = true
}

plugins.withType(CheckstylePlugin) {
	checkstyle {
		maxWarnings = 0 // allow no warnings!
	}
}

distributions {
	main {
		baseName 'main'
		contents {
			from app
		}
	}
}

apply plugin: 'com.mercadolibre.i18n'

def buildJavadocFolder = "$buildDir/docs/javadoc"
def javadocFolder = "documentation/javadoc"

task deleteJavadoc(type: Delete) {
	group "documentation"
	delete javadocFolder
}

task createProjectJavadoc(type: Copy) {
	group "documentation"
	description 'Executes javadoc task and copies the result in the documentation folder.'

	dependsOn javadoc
	dependsOn deleteJavadoc

	from buildJavadocFolder
	into javadocFolder
}

task deleteJavadocBuildFolder(type: Delete) {
	group "documentation"
	delete buildJavadocFolder
}

createProjectJavadoc.finalizedBy(deleteJavadocBuildFolder);
test.finalizedBy(checkCodeFormat)

i18n {
	app = "px-checkout-mobile-payments"
	project = "mp-apps-px"
}